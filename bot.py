import asyncio
import logging
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.raw.functions.account import ReportPeer
from pyrogram.raw.types import (
    InputReportReasonOther, InputReportReasonSpam, InputReportReasonViolence,
    InputReportReasonChildAbuse, InputReportReasonPornography, InputReportReasonCopyright,
    InputReportReasonFake, InputReportReasonIllegalDrugs, InputReportReasonPersonalDetails
)
import pymongo

# ЁЯУМ рд▓реЙрдЧрд┐рдВрдЧ рд╕реЗрдЯрдЕрдк
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ЁЯЫая╕П рдХрдВрдлрд┐рдЧрд░реЗрд╢рди
API_ID = 23120489
API_HASH = "ccfc629708e2f8a05c31ebe7961b5f92"
BOT_TOKEN = "7782975743:AAGuVZ4Ip9mk8DwUtYYLb8nYD1T4PHugkDU"

# MongoDB рдХрдВрдлрд┐рдЧрд░реЗрд╢рди
client_mongo = pymongo.MongoClient("mongodb+srv://sanatanixtech:sachin@sachin.9guym.mongodb.net/?retryWrites=true&w=majority&appName=Sachin")
db = client_mongo['report_bot_db']
sessions_collection = db['sessions']
reports_collection = db['reports']

# ЁЯОп рдмреЛрдЯ рдХреНрд▓рд╛рдЗрдВрдЯ
bot = Client("bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# ЁЯФ╣ рд╕рддреНрд░ рдХреЛ рд╕рдВрдЧреНрд░рд╣рд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдФрд░ рдпрд╣ рдЬрд╛рдВрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐ рд╕рддреНрд░ рдЬреЛрдбрд╝рд╛ рдЧрдпрд╛ рд╣реИ рдпрд╛ рдирд╣реАрдВ
session_strings = []

# ЁЯОп Start рдХрдорд╛рдВрдб
@bot.on_message(filters.command("start"))
async def start_command(client, message):
    # рдЬрд╛рдВрдЪреЗрдВ рдХрд┐ рдХреНрдпрд╛ рд╕рддреНрд░ рдкрд╣рд▓реЗ рд╕реЗ рдЬреЛрдбрд╝реЗ рдЧрдП рд╣реИрдВ
    existing_sessions = sessions_collection.find()
    if existing_sessions:
        welcome_text = "ЁЯСЛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рд╕рднреА рд╕рддреНрд░ рдкрд╣рд▓реЗ рд╣реА рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдХрд┐рдП рдЧрдП рд╣реИрдВред рдЖрдк рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдирд╛ рд╢реБрд░реВ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
    else:
        welcome_text = "ЁЯСЛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдХрдИ session strings рдЬреЛрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП /make_config <number> рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред"
    
    buttons = [[InlineKeyboardButton("тЭУ рдорджрдж", callback_data="show_help")]]
    
    await message.reply(
        welcome_text,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# ЁЯОп рдорджрдж рдХрдорд╛рдВрдб (рдмрдЯрди рдХреНрд▓рд┐рдХ рдпрд╛ /help)
@bot.on_message(filters.command("help"))
@bot.on_callback_query(filters.regex("^show_help$"))
async def help_command(client, update):
    help_text = """
ЁЯУМ *рдЗрд╕ рдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреИрд╕реЗ рдХрд░реЗрдВ:*
1я╕ПтГг `/make_config <number>` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдЖрдк session strings рдЬреЛрдбрд╝ рд╕рдХреЗрдВ (рдЬреИрд╕реЗ, `/make_config 5`).
2я╕ПтГг `/report @username` рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдХрд┐рд╕реА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдПред
3я╕ПтГг рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рдХрд╛рд░рдг рдЪреБрдиреЗрдВред
4я╕ПтГг рд░рд┐рдкреЛрд░реНрдЯ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рд╕рдВрдЦреНрдпрд╛ рдЪреБрдиреЗрдВ (рдЬреИрд╕реЗ, 10, 50, 100, 200 рддрдХ)ред

тЬЕ рдЖрдк рдПрдХ рд╕рд╛рде 10, 50, 100, рдпрд╛ 200 рд░рд┐рдкреЛрд░реНрдЯ рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВ!
"""
    if isinstance(update, filters.callback_query):
        await update.message.edit_text(help_text)
    else:
        await update.reply(help_text)

# ЁЯОп Make Config рдХрдорд╛рдВрдб
@bot.on_message(filters.command("make_config"))
async def make_config(client, message):
    # рдкрд╣рд▓реЗ рд╕реЗ рд╕рддреНрд░ рдЬреЛрдбрд╝рдиреЗ рдХреА рд╕реНрдерд┐рддрд┐ рдЪреЗрдХ рдХрд░реЗрдВ
    existing_sessions = sessions_collection.find()
    if existing_sessions:
        return await message.reply("тЪая╕П рд╕рддреНрд░ рдкрд╣рд▓реЗ рд╣реА рдЬреЛрдбрд╝ рджрд┐рдП рдЧрдП рд╣реИрдВ! рдЖрдк рдЕрдм рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдирд╛ рд╢реБрд░реВ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред")

    # рд╕рддреНрд░ рдЬреЛрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП
    args = message.text.split()

    if len(args) < 2:
        return await message.reply("тЪая╕П рдЙрдкрдпреЛрдЧ: `/make_config <number>` рдЬрд╣рд╛рдБ <number> рд╡рд╣ рд╕рдВрдЦреНрдпрд╛ рд╣реИ рдЬрд┐рд╕рдХреЛ рдЖрдк рдЬреЛрдбрд╝рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред")

    try:
        session_count = int(args[1])  # рд╕рддреНрд░ рдХреА рд╕рдВрдЦреНрдпрд╛
    except ValueError:
        return await message.reply("тЪая╕П рдХреГрдкрдпрд╛ рдПрдХ рд╕рд╣реА рд╕рдВрдЦреНрдпрд╛ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред")

    await message.reply(f"тЪЩя╕П рдХреГрдкрдпрд╛ {session_count} session strings рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдкреНрд░рд╛рд░реВрдк рдореЗрдВ рдкреНрд░рджрд╛рди рдХрд░реЗрдВ (рд╕реНрдкреЗрд╕ рд╕реЗ рдЕрд▓рдЧ рдХрд░реЗрдВ):\n\n<session_string_1> <session_string_2> ...")

    # рдЕрдкреЗрдХреНрд╖рд┐рдд рд╕рддреНрд░ рдХреА рд╕рдВрдЦреНрдпрд╛ рд╕реНрдЯреЛрд░ рдХрд░реЗрдВ
    session_strings.clear()  # рдкрд┐рдЫрд▓реЗ рд╕рддреНрд░реЛрдВ рдХреЛ рд╕рд╛рдл рдХрд░реЗрдВ
    bot.expected_session_count = session_count

# ЁЯОп рд╕рддреНрд░ strings рдПрдХрддреНрд░рд┐рдд рдХрд░рдирд╛
@bot.on_message(filters.text)
async def collect_session_strings(client, message):
    if hasattr(bot, 'expected_session_count') and len(session_strings) < bot.expected_session_count:
        session_input = message.text.strip()

        # рд╕рддреНрд░реЛрдВ рдХреЛ рдЬреЛрдбрд╝рдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛
        new_sessions = session_input.split()

        if len(new_sessions) == bot.expected_session_count:
            session_strings.extend(new_sessions)
            await message.reply(f"тЬЕ {len(new_sessions)} session strings рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝реЗ рдЧрдПред")
            
            # рд╕рддреНрд░реЛрдВ рдХреЛ MongoDB рдореЗрдВ рд╕рд╣реЗрдЬреЗрдВ
            sessions_collection.insert_many([{"session_string": session} for session in new_sessions])

            # рдкреБрд╖реНрдЯрд┐ рднреЗрдЬреЗрдВ
            await message.reply("тЬЕ рд╕рднреА session strings рдЬреЛрдбрд╝ рджрд┐рдП рдЧрдП рд╣реИрдВ! рдЕрдм рдЖрдк рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдирд╛ рд╢реБрд░реВ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред")
            del bot.expected_session_count  # рдЕрдкреЗрдХреНрд╖рд┐рдд рд╕рддреНрд░ рд╕рдВрдЦреНрдпрд╛ рдХреЛ рд╣рдЯрд╛рдПрдВ
        else:
            await message.reply(f"тЪая╕П рдХреГрдкрдпрд╛ {bot.expected_session_count} рд╕рддреНрд░ strings рдкреНрд░рджрд╛рди рдХрд░реЗрдВред")
    else:
        await message.reply("тЪая╕П рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ /make_config рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рд╕рддреНрд░ рдЬреЛрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдПред")

# ЁЯОп рд░рд┐рдкреЛрд░реНрдЯ рдХрдорд╛рдВрдб (рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХрд╛рд░рдг рдЪреБрдирддрд╛ рд╣реИ)
@bot.on_message(filters.command("report"))
async def report_user(client, message):
    # рд╕рддреНрд░ рдЪреЗрдХ рдХрд░реЗрдВ рдХрд┐ рдХреНрдпрд╛ рдкрд╣рд▓реЗ рд╕реЗ рдЬреЛрдбрд╝реЗ рдЧрдП рд╣реИрдВ
    if not session_strings:
        return await message.reply("тЪая╕П рд╕рддреНрд░ рдЬреЛрдбрд╝рд╛ рдирд╣реАрдВ рдЧрдпрд╛! рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ /make_config рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред")

    args = message.text.split()
    
    if len(args) < 2:
        return await message.reply("тЪая╕П рдЙрдкрдпреЛрдЧ: `/report @username`")

    username = args[1]

    buttons = [
        [InlineKeyboardButton("I don't like it", callback_data=f"report:{username}:other")],
        [InlineKeyboardButton("Child abuse", callback_data=f"report:{username}:child_abuse")],
        [InlineKeyboardButton("Violence", callback_data=f"report:{username}:violence")],
        [InlineKeyboardButton("Illegal goods", callback_data=f"report:{username}:illegal_goods")],
        [InlineKeyboardButton("Illegal adult content", callback_data=f"report:{username}:porn")],
        [InlineKeyboardButton("Personal data", callback_data=f"report:{username}:personal_data")],
        [InlineKeyboardButton("Terrorism", callback_data=f"report:{username}:fake")],
        [InlineKeyboardButton("Scam or spam", callback_data=f"report:{username}:spam")],
        [InlineKeyboardButton("Copyright", callback_data=f"report:{username}:copyright")],
        [InlineKeyboardButton("Other", callback_data=f"report:{username}:other")]
    ]
    
    await message.reply(
        f"тЪая╕П {username} рдХреЛ рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рдХрд╛рд░рдг рдЪреБрдиреЗрдВ:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# ЁЯОп рд░рд┐рдкреЛрд░реНрдЯ рд╣реИрдВрдбрд▓рд░ (рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рджреНрд╡рд╛рд░рд╛ рдХрд╛рд░рдг рдЪреБрдиреЗ рдЬрд╛рдиреЗ рдкрд░)
@bot.on_callback_query(filters.regex("^report:"))
async def handle_report(client, callback_query):
    data = callback_query.data.split(":")
    
    if len(data) < 3:
        return

    username = data[1]
    reason_code = data[2]

    reason_mapping = {
        "spam": InputReportReasonSpam(),
        "violence": InputReportReasonViolence(),
        "child_abuse": InputReportReasonChildAbuse(),
        "porn": InputReportReasonPornography(),
        "copyright": InputReportReasonCopyright(),
        "fake": InputReportReasonFake(),
        "illegal_goods": InputReportReasonIllegalDrugs(),
        "personal_data": InputReportReasonPersonalDetails(),
        "other": InputReportReasonOther()
    }

    reason = reason_mapping.get(reason_code, InputReportReasonOther())

    # рд░рд┐рдкреЛрд░реНрдЯ рднреЗрдЬрдиреЗ рдХреА рд╕рдВрдЦреНрдпрд╛ рдЪрдпрди
    buttons = [
        [InlineKeyboardButton("10 Reports", callback_data=f"sendreport:{username}:{reason_code}:10")],
        [InlineKeyboardButton("50 Reports", callback_data=f"sendreport:{username}:{reason_code}:50")],
        [InlineKeyboardButton("100 Reports", callback_data=f"sendreport:{username}:{reason_code}:100")],
        [InlineKeyboardButton("200 Reports", callback_data=f"sendreport:{username}:{reason_code}:200")]
    ]

    await callback_query.message.edit_text(
        f"тЬЕ рдЪреБрдирд╛ рдЧрдпрд╛ рдХрд╛рд░рдг: {reason_code.replace('_', ' ').title()}\n\nрд░рд┐рдкреЛрд░реНрдЯ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рд╕рдВрдЦреНрдпрд╛ рдЪреБрдиреЗрдВ:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# ЁЯОп рдмрд▓реНрдХ рд░рд┐рдкреЛрд░реНрдЯ рд╣реИрдВрдбрд▓рд░
@bot.on_callback_query(filters.regex("^sendreport:"))
async def send_bulk_reports(client, callback_query):
    data = callback_query.data.split(":")
    
    if len(data) < 4:
        return

    username = data[1]
    reason_code = data[2]
    count = int(data[3])

    reason_mapping = {
        "spam": InputReportReasonSpam(),
        "violence": InputReportReasonViolence(),
        "child_abuse": InputReportReasonChildAbuse(),
        "porn": InputReportReasonPornography(),
        "copyright": InputReportReasonCopyright(),
        "fake": InputReportReasonFake(),
        "illegal_goods": InputReportReasonIllegalDrugs(),
        "personal_data": InputReportReasonPersonalDetails(),
        "other": InputReportReasonOther()
    }

    reason = reason_mapping.get(reason_code, InputReportReasonOther())

    try:
        for session_string in session_strings:
            userbot = Client("userbot", api_id=API_ID, api_hash=API_HASH, session_string=session_string)
            await userbot.start()

            entity = await userbot.get_users(username)

            for _ in range(count):
                await userbot.report_peer(entity, reason)

            await userbot.stop()

        await callback_query.message.edit_text(f"тЬЕ {count} рд░рд┐рдкреЛрд░реНрдЯ {username} рдХреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬреА рдЧрдИред")
    except Exception as e:
        await callback_query.message.edit_text(f"тЭМ рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {str(e)}")

# ЁЯОп рдмреЛрдЯ рдХреЛ рдЪрд▓рд╛рдирд╛
bot.run()
